# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: cpuinfo.proto
# Protobuf Python Version: 6.32.0
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    6,
    32,
    0,
    '',
    'cpuinfo.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\rcpuinfo.proto\"\xa3\x02\n\x11\x63puinfo_x86_entry\x12,\n\tvendor_id\x18\x01 \x02(\x0e\x32\x19.cpuinfo_x86_entry.vendor\x12\x12\n\ncpu_family\x18\x02 \x02(\r\x12\r\n\x05model\x18\x03 \x02(\r\x12\x10\n\x08stepping\x18\x04 \x02(\r\x12\x16\n\x0e\x63\x61pability_ver\x18\x05 \x02(\r\x12\x12\n\ncapability\x18\x06 \x03(\r\x12\x10\n\x08model_id\x18\x07 \x01(\t\x12\x16\n\x0exfeatures_mask\x18\x08 \x01(\x04\x12\x12\n\nxsave_size\x18\t \x01(\r\x12\x16\n\x0exsave_size_max\x18\n \x01(\r\")\n\x06vendor\x12\x0b\n\x07UNKNOWN\x10\x00\x12\t\n\x05INTEL\x10\x01\x12\x07\n\x03\x41MD\x10\x02\"6\n\rcpuinfo_entry\x12%\n\tx86_entry\x18\x01 \x03(\x0b\x32\x12.cpuinfo_x86_entry')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'cpuinfo_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  DESCRIPTOR._loaded_options = None
  _globals['_CPUINFO_X86_ENTRY']._serialized_start=18
  _globals['_CPUINFO_X86_ENTRY']._serialized_end=309
  _globals['_CPUINFO_X86_ENTRY_VENDOR']._serialized_start=268
  _globals['_CPUINFO_X86_ENTRY_VENDOR']._serialized_end=309
  _globals['_CPUINFO_ENTRY']._serialized_start=311
  _globals['_CPUINFO_ENTRY']._serialized_end=365
# @@protoc_insertion_point(module_scope)
